#include "global.h"

#ifndef _randomh
#define _randomh

namespace SYNARMOSMA {
  /// A class used to encapsulate all of the generation of pseudo-random numbers and other random processes like shuffling operations.
  class Random {
   /// An alias for the Mersenne twister random number generator used throughout 
   /// this class.
   using base_generator_type = boost::mt19937;
   
   private:
    /// This non-negative integral property stores the seed that is used by the pseudo-random 
    /// number generator.
    unsigned long s = 1970;
    /// This property is the base generator for all of the different categories of random 
    /// numbers generated by this class and is aliased to the Boost library's Mersenne twister,
    /// boost:mt19937.
    base_generator_type BGT;

    /// This property is a pointer to the object responsible for handling the generation of 
    /// beta distribution variates. 
    boost::math::beta_distribution<>* root_beta;

    /// This property is a pointer to the object responsible for handling the generation of 
    /// Bernoulli distribution variates. 
    boost::bernoulli_distribution<>* brn;
    /// This property carries out the actual generation of the Bernoulli distribution 
    /// variates.
    boost::variate_generator<base_generator_type&,boost::bernoulli_distribution<> >* vbrn;

    /// This property is a pointer to the object responsible for handling the generation of 
    /// Poisson distribution variates. 
    boost::poisson_distribution<>* poisson;
    /// This property carries out the actual generation of the Poisson distribution 
    /// variates.
    boost::variate_generator<base_generator_type&,boost::poisson_distribution<> >* vpoisson;

    /// This property is a pointer to the object responsible for handling the generation of 
    /// uniform distribution variates. 
    boost::uniform_real<>* uniform;
    /// This property carries out the actual generation of the uniform distribution 
    /// variates.
    boost::variate_generator<base_generator_type&,boost::uniform_real<> >* VRG;

    /// This property is a pointer to the object responsible for handling the generation of 
    /// Gaussian (normal) distribution variates. 
    boost::normal_distribution<>* gaussian;
    /// This property carries out the actual generation of the Gaussian (normal) distribution 
    /// variates.
    boost::variate_generator<base_generator_type&,boost::normal_distribution<> >* NRG;

    /// This Boolean property is set to true when the Random::initialize_bernoulli method is 
    /// called and the Random:brn and Random::vbrn pointers are allocated memory, so that the 
    /// memory can be freed in the class' destructor.
    bool brn_allocated = false;
    /// This Boolean property is set to true when the Random::initialize_bernoulli method is 
    /// called and the Random::root_beta is allocated memory, so that the memory can be freed 
    /// in the class' destructor.
    bool beta_allocated = false;
    /// This Boolean property is set to true when the Random::initialize_poisson method is 
    /// called and the Random:poisson and Random::vpoisson pointers are allocated memory, so 
    /// that the memory can be freed in the class' destructor.
    bool poisson_allocated = false;
   public:
    /// The unique constructor, which allocates the Random::uniform and Random::gaussian objects as well as their variate generations, Random::VRG and Random::NRG. 
    Random(unsigned long = 0);
    /// The destructor which frees the memory associated with the pointers Random::uniform, Random::VRG, Random::gaussian, Random::NRG and the other distributions, if the Random::poisson_allocated, Random::beta_allocated and Random::brn_allocated properties are true.
    ~Random();
    /// This method returns the current value of the pseud-random number seed.
    unsigned long get_seed() const;
    /// This method allows the seed value to be set for the pseudo-random number generator.
    void set_seed(unsigned long);
    /// This method increments the seed value by one and then resets the pseudo-random number generator. 
    void increment_seed();
    /// This method decrements the seed value by one and then resets the pseudo-random number generator. 
    void decrement_seed();
    /// This method allocates the memory for the Random::root_beta property using the two arguments and sets Random::beta_allocated to true.
    void initialize_beta(double,double);
    /// This method allocates the memory for the Random::brn and Random::vbrn properties using the argument and sets Random::bernoulli_allocated to true.
    void initialize_bernoulli(double);
    /// This method allocates the memory for the Random::poisson and Random::vpoisson properties using the argument and sets Random::poisson_allocated to true.
    void initialize_poisson(double);
    /// This method generates a uniform random variate on the interval [0,1) using the Random::VRG property.
    double drandom();
    /// This method generates a uniform random variate on the interval [a,b) using the Random::VRG property, where a and b are the method's arguments.
    double drandom(double,double);
    /// This method generates a beta variate and assumes that the initialize_beta() method has already been called.
    double beta_variate();
    /// This method generates a Bernoulli variate and assumes that the initialize_bernoulli() method has already been called.
    bool bernoulli_variate();
    /// This method generates a Poisson variate and assumes that the initialize_poisson() method has already been called.
    bool poisson_variate();
    /// This method generates a Gaussian random variate with mean zero and variance unity, using the Random::NRG property.
    double nrandom();
    /// This method generates a Gaussian random variate with mean zero and variance equal to the method's argument.  
    double nrandom(double);
    /// This method generates a Gaussian random variate with mean equal to the first argument and variance to the second argument.
    double nrandom(double,double);
    /// This method generates an integral uniform random variate on the interval [0,n-1] where n is the method's argument.
    int irandom(int);
    /// This method generates an integral uniform random variate on the interval [a,b] where a and b are the method's arguments.
    int irandom(int,int);
    /// This method selects an element at random from the input set of integers that is its argument and returns it.
    int irandom(const std::set<int>&);
    /// This method selects an element at random from the input set of non-negative integers that is its argument and returns it.
    unsigned int irandom(const std::set<unsigned int>&);
    /// This method selects and element at random from the first argument which is not a member of the second argument and returns it.
    int irandom(const std::set<int>&,const std::set<int>&);
    /// This method generates an integral uniform random variate on the interval [0,n-1] where n is the length of the input vector and, if the element of the vector corresponding to this index is zero, returns it. 
    int irandom(const std::vector<int>&);
    /// This method generates an integral uniform random variate on the interval [0,n-1] where n is the first argument and, if this value is not contained in the second argument, returns it.
    int irandom(int,const std::vector<int>&);
    /// This method generates a randomly shuffled vector (the first argument) of length n (the second argument), with vector values on the interval [0,n-1].
    void shuffle(std::vector<int>&,int);
    /// This method generates a vector (the first argument) of doubles of length n (the second argument), filled with uniform random variates on the interval [a,b), the two final arguments.
    void generate_random_vector(std::vector<double>&,int,double,double);
    /// This method generates a vector (the first argument) of complex numbers of length n (the second argument); the real part of these numbers are uniform random variates on the interval [a,b) (the third and fourth arguments) and imaginary part either zero if the final argument is false or uniform random variates on [a,b) if it is true.
    void generate_random_vector(std::vector<std::complex<double> >&,int,double,double,bool = false);
  };

  inline unsigned long Random::get_seed() const
  {
    return s;
  }

  inline void Random::set_seed(unsigned long x)
  {
    s = x; 
    BGT.seed(s);
  }

  inline void Random::increment_seed() 
  {
    s++; 
    BGT.seed(s);
  }

  inline void Random::decrement_seed()
  {
    s--;
    BGT.seed(s);
  }
}
#endif
